# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
name: Build Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  identify-simhub-version:
    runs-on: ubuntu-latest

    outputs:
      latest_tag: ${{ steps.fetchkeys.outputs.latest_tag }}
      download_url: ${{ steps.fetchkeys.outputs.download_url }}

    steps:
      - uses: actions/checkout@v5

      - name: Fetch latest binary
        id: fetchkeys
        continue-on-error: true
        run: |
          curl -Ls "https://api.github.com/repos/SHWotever/SimHub/releases/latest" -o latest_simhub.json
          LATEST_TAG=$(grep -Po '"tag_name": "\K[^"]*' ./latest_simhub.json)
          DOWNLOAD_URL=$(grep -Po '"browser_download_url": "\K[^"]*' ./latest_simhub.json)

          echo "Latest build: $LATEST_TAG"
          echo "Download link: $DOWNLOAD_URL"

          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

  build:
    runs-on: windows-latest

    needs:
      - identify-simhub-version

    env:
      SIMHUB_INSTALL_PATH: "D:\\SimHub\\"

    steps:
    - uses: actions/checkout@v5

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.6

    - uses: actions/cache@v3
      name: Restore Caches
      id: cache
      with:
        path: |
          innounp.exe
          SimHub.${{ needs.identify-simhub-version.outputs.latest_tag }}.zip
        key: SimHub.${{ needs.identify-simhub-version.outputs.latest_tag }}

    - name: Download Requirements # Used to download the SimHub DLLs - only if not in cache.
      if: steps.cache.outputs.cache-hit != 'true'
      run: | 
        aria2c -j1 -o SimHub.${{ needs.identify-simhub-version.outputs.latest_tag }}.zip "${{ needs.identify-simhub-version.outputs.download_url }}"
        7z x SimHub.${{ needs.identify-simhub-version.outputs.latest_tag }}.zip

    - name: Install SimHub
      run: |
        dir
        7z x SimHub.${{ needs.identify-simhub-version.outputs.latest_tag }}.zip -y
        New-Item -Path "D:\" -Name "SimHub" -ItemType "Directory"
        ./SimHubSetup_${{ needs.identify-simhub-version.outputs.latest_tag }}.exe /VERYSILENT /Dir="D:\SimHub"

        do {
          Write-Output "Waiting for files..."
          Start-Sleep -Seconds 5
        } until (
          (Test-Path -path "D:\SimHub\WoteverCommon.dll" -PathType Leaf) -and
          (Test-Path -path "D:\SimHub\WoteverLocalization.dll" -PathType Leaf) -and
          (Test-Path -path "D:\SimHub\GameReaderCommon.dll" -PathType Leaf) -and
          (Test-Path -path "D:\SimHub\SimHub.Logging.dll" -PathType Leaf) -and
          (Test-Path -path "D:\SimHub\SimHub.Plugins.dll" -PathType Leaf) -and
          (Test-Path -path "D:\SimHub\log4net.dll" -PathType Leaf)
        )

        Start-Sleep -Seconds 3
        Write-Output "All files are found"

    - name: Navigate to workspace
      run: cd $GITHUB_WORKSPACE

    - name: Restore NuGet Packages
      run: nuget restore OpenFFBoard.PluginSdk.sln

    - name: Build
      run: msbuild OpenFFBoard.PluginSdk.sln /p:Configuration=Release

    - name: Zip output DLL file
      run: Compress-Archive -Path ./bin/Release/OpenFFBoard.PluginSdk.dll -DestinationPath ./${{ env.ReleaseFileName }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-file
        path: ${{ env.ReleaseFileName }}

